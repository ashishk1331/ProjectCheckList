import { Client } from "@notionhq/client";
import { Parser } from "tetrapack";
import Image from "next/image";
import Link from "next/link";
import Head from "next/head";
import Button from "../../components/Button";
import Footer from "../../components/Footer";
import { ArrowLeft, Check, BookmarkSimple } from "@phosphor-icons/react";

export default function Post(props) {
	return (
		<>
			<Head>
				<title>{props.data.properties.title.title[0].plain_text}</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link
					rel="apple-touch-icon"
					sizes="180x180"
					href="/apple-touch-icon.png"
				/>
				<link
					rel="icon"
					type="image/png"
					sizes="32x32"
					href="/favicon-32x32.png"
				/>
				<link
					rel="icon"
					type="image/png"
					sizes="16x16"
					href="/favicon-16x16.png"
				/>
				<link rel="manifest" href="/site.webmanifest" />
			</Head>
			<div className="w-full h-48 bg-green" />
			<main className="p-3 px-6 max-w-[720px] mx-auto">
				<div className="flex items-center gap-4">
					<Link href="/">
						<Button>
							<ArrowLeft className="w-6 h-6" />
						</Button>
					</Link>
				</div>

				<h1 className="my-6 text-4xl font-medium">
					{props.data.properties.title.title[0].plain_text}
				</h1>

				<hr className="mb-8"/>

				<Parser blocks={props.blocks.results}>
					{() => {
						return {
							wrapper: (text) => (
								<div className="flex flex-col items-left gap-4 prose max-w-none">
									{text}
								</div>
							),
						};
					}}
				</Parser>

				<Footer />
			</main>
		</>
	);
}

export async function getStaticPaths() {
	const notion = new Client({
		auth: process.env.NOTION_TOKEN,
	});
	const page_id = process.env.NOTION_PAGE_ID;

	let paths = [];

	const resp = await notion.blocks.children.list({
		block_id: page_id,
		page_size: 50,
	});

	resp.results.forEach((i) => {
		if (i.type === "child_page")
			paths.push({
				params: {
					id: i.id,
				},
			});
	});

	return {
		paths,
		fallback: false,
	};
}

export async function getStaticProps({ params: { id } }) {
	const notion = new Client({
		auth: process.env.NOTION_TOKEN,
	});

	const response = await notion.pages.retrieve({ page_id: id });

	const blocks = await notion.blocks.children.list({
		block_id: id,
		page_size: 50,
	});

	return {
		props: {
			data: { ...response },
			blocks: { ...blocks },
		},
	};
}
